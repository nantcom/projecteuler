using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics;
using System.Text;
using System.Dynamic;
using NantCom;
using NantCom.DataStructure.Tree;

namespace ProjectEuler.Test
{

    [TestClass]
    public class Problems21to30
    {

        [TestMethod]
        [TestCategory("21-30")]
        public void Problem27()
        {
            /*
            n² + an + b, where |a| < 1000 and |b| < 1000

            where |n| is the modulus/absolute value of n
            e.g. |11| = 11 and |−4| = 4

            Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.

             */

            Func<int, int, int, int> check = (n, a, b) =>
            {
                return (n * n) + (a * n) + b;
            };

            var allPossible = from a in (-1000).To(1000)
                              from b in (-1000).To(1000)
                              let totalPrime = (from n in 0.To(int.MaxValue)
                                                select check(n, a, b)).TakeWhile(n => n.IsPrime()).Count()
                              select new
                              {
                                  A = a,
                                  B = b,
                                  TotalPrime = totalPrime
                              };

            var byMaxPrime = from answer in allPossible.AsParallel()
                             orderby answer.TotalPrime descending
                             select answer;

            var max = byMaxPrime.First();

            var product = max.A * max.B;

            Assert.IsTrue(product == -59231, "Wrong Answer");
        }

        [TestMethod]
        [TestCategory("21-30")]
        public void Problem29()
        {
            /*
             Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

            22=4, 23=8, 24=16, 25=32
             32=9, 33=27, 34=81, 35=243
             42=16, 43=64, 44=256, 45=1024
             52=25, 53=125, 54=625, 55=3125


            If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

            4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

            How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
            */

            var allPossible = (from a in 2.To(100)
                               from b in 2.To(100)
                               select Math.Pow(a, b)).AsParallel().Distinct();

            var count = allPossible.Count();
        }

        [TestMethod]
        [TestCategory("21-30")]
        public void Problem30()
        {
            /*
             * Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:

                1634 = 14 + 64 + 34 + 44
                 8208 = 84 + 24 + 04 + 84
                 9474 = 94 + 44 + 74 + 44

                As 1 = 14 is not a sum it is not included.

                The sum of these numbers is 1634 + 8208 + 9474 = 19316.

                Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.

             */

            Func<int, bool> check = (number) =>
            {
                var numbers = from c in number.ToString()
                              select (int)c - 48;

                var computed = (from n in numbers
                                select Math.Pow(n, 5)).Sum();

                return number == computed;
            };

            // upper limit from forum
            int maxSingleDigit = (int)Math.Pow(9, 5);
            int maxDigits = 1;

            while ((maxSingleDigit * maxDigits) > Math.Pow(10, maxDigits))
            {
                maxDigits++;
            }

            var allPossible = from number in 2.To((int)Math.Pow(10, maxDigits))
                              where check(number)
                              select number;

            var sum = allPossible.Sum();

            Assert.IsTrue(sum == 443839, "Wrong Answer");
        }

    }
}
